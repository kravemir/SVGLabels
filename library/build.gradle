configurations {
    generatedModelCompile
    testlibCompile.extendsFrom compile
    testCompile.extendsFrom testlibCompile
}

sourceSets {
    generatedModel {
        java.srcDir "${buildDir}/generated/model"
    }
    main {
        java {
            compileClasspath += sourceSets.generatedModel.output
            runtimeClasspath += sourceSets.generatedModel.output
        }
    }
    testlib {
        java {
            compileClasspath += sourceSets.main.output + configurations.testlibCompile
        }
    }
    test {
        java {
            compileClasspath += sourceSets.testlib.output
            runtimeClasspath += sourceSets.testlib.output
        }
    }
}

dependencies {
    compile 'xml-apis:xml-apis-ext:1.3.04'

    compile 'org.apache.xmlgraphics:xmlgraphics-commons:2.3'
    compile 'org.apache.xmlgraphics:batik-svg-dom:1.10'
    compile 'org.apache.xmlgraphics:batik-transcoder:1.10'
    compile 'org.apache.xmlgraphics:batik-anim:1.10'

    compile group: 'org.apache.commons', name: 'commons-jexl3', version: '3.1'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'

    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.0.0'

    generatedModelCompile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.0.0'

    testlibCompile sourceSets.main.output
    testlibCompile group: 'junit', name: 'junit', version: '4.11'
    testlibCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testlibCompile group: 'commons-io', name: 'commons-io', version: '2.5'
    testlibCompile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'

    testCompile 'org.apache.xmlgraphics:batik-swing:1.10'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile 'pl.pragmatists:JUnitParams:1.1.1'
}

ext {
    artifact = "svg-labels"
}

jar {
    from sourceSets.main.output
}

task generateModelSources(type: Exec) {
    doFirst {
        file("${buildDir}/generated/model").deleteDir()
        file("${buildDir}/generated/model").mkdirs()
    }

    commandLine "protoc"
    args = [
            "-I=${projectDir}/src/protobuf/model",
            "--java_out=${buildDir}/generated/model",
            "${projectDir}/src/protobuf/model/model.proto"
    ]
    outputs.dir("${buildDir}/generated/model")
}
compileGeneratedModelJava.dependsOn(generateModelSources)
compileJava{
    dependsOn(compileGeneratedModelJava)
    source    += sourceSets.generatedModel.java
}

task jarWithSources(type: Jar) {
    from sourceSets.main.output
    if (gradle.startParameter.taskNames.any{it == "publishToMavenLocal"}) {
        from sourceSets.main.allJava
    }
}

task testlibJar(type: Jar) {
    from sourceSets.testlib.output
    classifier 'testlib'
}

artifacts {
    testlibCompile testlibJar
}
